name: Deployment

on:
  workflow_run:
    workflows: ["Lint"]
    types:
      - completed

  workflow_dispatch:

jobs:
  push_to_DockerHub_Dotnet_Core:
    name: Push Images to DockerHub
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # build Docker image and push to docker hub
    
    # only if the app build and test successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: OurNonfictionBackend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/el-proyecte-grande-backend:latest
          secrets: |
            "nonfictionuser=${{ secrets.SOMNIAEMAIL }}"
            "nonfictionpassword=${{ secrets.SOMNIAPASSWORD }}"
            "TokenKey=${{ secrets.TOKENKEY }}"
            "ClientId=${{ secrets.CLIENTID }}"
          

      - name: Run the image in a container
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/el-proyecte-grande-backend:latest
          run: |
            echo "runing the docker image"
            echo "Testing the nodejs  app endpoints"
            echo ${{ steps.docker_build.outputs.digest }}
            
  push_to_DockerHub_React:
    name: Push Images to DockerHub React
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # build Docker image and push to docker hub
    
    # only if the app build and test successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: OurNonfictionFrontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/el-proyecte-grande:latest

      - name: Run the image in a container
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ secrets.DOCKERHUB_USERNAME }}/el-proyecte-grande:latest
          run: |
            echo "runing the docker image"
            echo "Testing the nodejs  app endpoints"
            echo ${{ steps.docker_build.outputs.digest }}
            
  deploy_to_Heroku:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    # only run this after deploying to docker
    needs: [push_to_DockerHub_Dotnet_Core]
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      # more info on deploy to Heroku:
      # https://github.com/marketplace/actions/deploy-to-heroku
      - name: deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12 
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          # build the app docker image using the Dockerfile
          # and run that image in a container that's pushed to Heroku
          usedocker: true
          justlogin: true

      - name: "Login to heroku registry"
        run: heroku container:login
        
      - name: "Pull docker container" 
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/el-proyecte-grande-backend:latest

      - name: "push to heroku registry"
        run: docker tag ${{ secrets.DOCKERHUB_USERNAME }}/el-proyecte-grande-backend:latest registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web

      - name: "Push the container"
        run: docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
        
      - name: "Releases the container"
        run: heroku container:release web -a ${{ secrets.HEROKU_APP_NAME }}


  deploy_to_Heroku_React:
    name: Deploy to Heroku React
    runs-on: ubuntu-latest
    # only run this after deploying to docker
    needs: [push_to_DockerHub_React]
    steps:
      - name: checkout repo
        uses: actions/checkout@v2
      # more info on deploy to Heroku:
      # https://github.com/marketplace/actions/deploy-to-heroku
      - name: deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12 
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_REACT_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          # build the app docker image using the Dockerfile
          # and run that image in a container that's pushed to Heroku
          usedocker: true
          justlogin: true

      - name: "Login to heroku registry"
        run: heroku container:login
        
      - name: "Pull docker container" 
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/el-proyecte-grande:latest

      - name: "Build and push to heroku registry"
        run: docker tag ${{ secrets.DOCKERHUB_USERNAME }}/el-proyecte-grande:latest registry.heroku.com/${{ secrets.HEROKU_REACT_APP_NAME }}/web

      - name: "Push the container"
        run: docker push registry.heroku.com/${{ secrets.HEROKU_REACT_APP_NAME }}/web
        
      - name: "Releases the container"
        run: heroku container:release web -a ${{ secrets.HEROKU_REACT_APP_NAME }}
